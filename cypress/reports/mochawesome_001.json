{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2022-12-01T02:30:12.255Z",
    "end": "2022-12-01T02:30:27.268Z",
    "duration": 15013,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "031345bd-511b-456b-b90d-cbf1d99d596c",
      "title": "",
      "fullFile": "cypress/e2e/Automation_Store/dataDrivenLogin.cy.js",
      "file": "cypress/e2e/Automation_Store/dataDrivenLogin.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dd4ea711-45dc-4261-b65d-24589ded4db7",
          "title": "Swag Labs Login Validations",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should attempt login with standard_user",
              "fullTitle": "Swag Labs Login Validations should attempt login with standard_user",
              "timedOut": null,
              "duration": 3108,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_loginPage.default.login(record.username, record.password);\nif (record.username === \"invalid_user\" || record.username === \"locked_out_user\") {\n  //check if user is invalid or locked out.\n  cy.url().should('eq', record.expectedUrl);\n  cy.get(_loginPage.default.loginMessage).should('have.text', record.message); //assert error message is displayed\n} else {\n  cy.url().should('eq', record.expectedUrl);\n  cy.contains('Products').should('be.visible');\n}",
              "err": {},
              "uuid": "09ccdfd3-0a20-4050-a113-411f5ebb6817",
              "parentUUID": "dd4ea711-45dc-4261-b65d-24589ded4db7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should attempt login with locked_out_user",
              "fullTitle": "Swag Labs Login Validations should attempt login with locked_out_user",
              "timedOut": null,
              "duration": 2997,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_loginPage.default.login(record.username, record.password);\nif (record.username === \"invalid_user\" || record.username === \"locked_out_user\") {\n  //check if user is invalid or locked out.\n  cy.url().should('eq', record.expectedUrl);\n  cy.get(_loginPage.default.loginMessage).should('have.text', record.message); //assert error message is displayed\n} else {\n  cy.url().should('eq', record.expectedUrl);\n  cy.contains('Products').should('be.visible');\n}",
              "err": {},
              "uuid": "0843cbff-eb7c-4b12-a3d8-b63659916146",
              "parentUUID": "dd4ea711-45dc-4261-b65d-24589ded4db7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should attempt login with problem_user",
              "fullTitle": "Swag Labs Login Validations should attempt login with problem_user",
              "timedOut": null,
              "duration": 1257,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_loginPage.default.login(record.username, record.password);\nif (record.username === \"invalid_user\" || record.username === \"locked_out_user\") {\n  //check if user is invalid or locked out.\n  cy.url().should('eq', record.expectedUrl);\n  cy.get(_loginPage.default.loginMessage).should('have.text', record.message); //assert error message is displayed\n} else {\n  cy.url().should('eq', record.expectedUrl);\n  cy.contains('Products').should('be.visible');\n}",
              "err": {},
              "uuid": "3b4a2c18-ccd8-4d35-83ea-b8a46d8ed148",
              "parentUUID": "dd4ea711-45dc-4261-b65d-24589ded4db7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should attempt login with performance_glitch_user",
              "fullTitle": "Swag Labs Login Validations should attempt login with performance_glitch_user",
              "timedOut": null,
              "duration": 6216,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_loginPage.default.login(record.username, record.password);\nif (record.username === \"invalid_user\" || record.username === \"locked_out_user\") {\n  //check if user is invalid or locked out.\n  cy.url().should('eq', record.expectedUrl);\n  cy.get(_loginPage.default.loginMessage).should('have.text', record.message); //assert error message is displayed\n} else {\n  cy.url().should('eq', record.expectedUrl);\n  cy.contains('Products').should('be.visible');\n}",
              "err": {},
              "uuid": "08901c23-ea50-46bb-9cfc-fea97d00ff96",
              "parentUUID": "dd4ea711-45dc-4261-b65d-24589ded4db7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should attempt login with invalid_user",
              "fullTitle": "Swag Labs Login Validations should attempt login with invalid_user",
              "timedOut": null,
              "duration": 1277,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_loginPage.default.login(record.username, record.password);\nif (record.username === \"invalid_user\" || record.username === \"locked_out_user\") {\n  //check if user is invalid or locked out.\n  cy.url().should('eq', record.expectedUrl);\n  cy.get(_loginPage.default.loginMessage).should('have.text', record.message); //assert error message is displayed\n} else {\n  cy.url().should('eq', record.expectedUrl);\n  cy.contains('Products').should('be.visible');\n}",
              "err": {},
              "uuid": "5307f533-38c3-4c6f-a6c0-42f308c6775c",
              "parentUUID": "dd4ea711-45dc-4261-b65d-24589ded4db7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "09ccdfd3-0a20-4050-a113-411f5ebb6817",
            "0843cbff-eb7c-4b12-a3d8-b63659916146",
            "3b4a2c18-ccd8-4d35-83ea-b8a46d8ed148",
            "08901c23-ea50-46bb-9cfc-fea97d00ff96",
            "5307f533-38c3-4c6f-a6c0-42f308c6775c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14855,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}